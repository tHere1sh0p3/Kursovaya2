# Code generated by TkForge <https://github.com/axorax/tkforge>
# Donate to support TkForge! <https://www.patreon.com/axorax>
import os
import re
import sys
import shutil
import logging
import threading
import webbrowser
import psutil
import ctypes
import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
from tkinter import filedialog


class TkForge_Entry(tk.Entry):
    def __init__(
        self, master=None, placeholder="Enter text", placeholder_fg="grey", **kwargs
    ):
        super().__init__(master, **kwargs)

        self.p, self.p_fg, self.fg = placeholder, placeholder_fg, self.cget("fg")
        self.putp()
        self.bind("<FocusIn>", self.toggle)
        self.bind("<FocusOut>", self.toggle)

    def putp(self):
        self.delete(0, tk.END)
        self.insert(0, self.p)
        self.config(fg=self.p_fg)
        self.p_a = True

    def toggle(self, event):
        if self.p_a:
            self.delete(0, tk.END)
            self.config(fg=self.fg)
            self.p_a = False
        elif not self.get():
            self.putp()

    def get(self):
        return "" if self.p_a else super().get()

    def is_placeholder(self, b):
        self.p_a = b
        self.config(fg=self.p_fg if b == True else self.fg)

    def get_placeholder(self):
        return self.p


def load_asset(path):
    base = getattr(sys, "_MEIPASS", os.path.dirname(os.path.abspath(__file__)))
    assets = os.path.join(base, "assets")
    return os.path.join(assets, path)


# Настройка логгера
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")

# Файловый хендлер для логирования в файл
file_handler = logging.FileHandler("log.txt")
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# Консольный хендлер для вывода сообщений в консоль
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)


def get_volume_label(drive):
    try:
        label = ctypes.create_unicode_buffer(255)
        ctypes.windll.kernel32.GetVolumeInformationW(
            drive, label, 255, None, None, None, None, None
        )
        return label.value
    except Exception as e:
        logger.error(f"Failed to obtain a volume label for {drive}. Error: {e}")
        return str(e)


def get_usb_drives():
    usb_drives = []
    for part in psutil.disk_partitions():
        if "removable" in part.opts:
            label = get_volume_label(part.device)
            usage = psutil.disk_usage(part.mountpoint)
            usb_drives.append(
                f"{label} ({part.mountpoint}) [{usage.total / (1024 ** 3):.1f} ГБ]"
            )
    return usb_drives


def select_outpath():
    path = filedialog.askdirectory()
    if path:
        textbox_1.delete(0, tk.END)
        textbox_1.is_placeholder(False)
        textbox_1.insert(0, path)


def is_system_folder(folder_name):
    # Проверка, является ли папка системной
    return folder_name in ["System Volume Information", "$RECYCLE.BIN"]


def update_progress_bar():
    progress_bar["value"] += 1
    window.update_idletasks()


def copy_files_from_flash_drive(flash_drive_path, destination_folder):
    for item in os.listdir(flash_drive_path):
        source_path = os.path.join(flash_drive_path, item)

        files = os.listdir(flash_drive_path)
        visible_items = [
            item for item in files if not item.startswith("System Volume Information")
        ]
        progress_bar["maximum"] = len(visible_items)

        # Пропускаем системные папки
        if is_system_folder(item):
            logger.debug(f"Missing system folder: {source_path}")
            continue

        destination_path = os.path.join(destination_folder, item)

        try:
            if os.path.isfile(source_path):
                shutil.copy2(source_path, destination_path)
                logger.info(f"File copied: {source_path} -> {destination_path}")
            elif os.path.isdir(source_path):
                shutil.copytree(source_path, destination_path)
                logger.info(
                    f"The directory is copied: {source_path} -> {destination_path}"
                )
            update_progress_bar()
        except Exception as e:
            logger.exception(f"Copy error {item}: {e}")
            messagebox.showerror("Error", f"Copy error {item}: {e}")

    messagebox.showinfo("Info", "Files successfully copied!")
    progress_bar["value"] = 0


def extract_disk_path(input_string):
    match = re.search(r"\(([A-Z]:\\)\)", input_string)
    if match:
        return match.group(1)
    else:
        return None


def run_in_thread(func, *args):
    thread = threading.Thread(target=func, args=args)
    thread.start()


def start_copy():
    selected_string = combobox.get()
    disk_path = extract_disk_path(selected_string)
    flash_drive = disk_path
    destination_folder = textbox_1.get()
    if flash_drive and destination_folder:
        run_in_thread(copy_files_from_flash_drive, flash_drive, destination_folder)
    else:
        print(combobox.get())
        print(disk_path)
        print(flash_drive)
        print(destination_folder)
        logger.warning(
            "The path to the flash drive or destination folder is not specified."
        )
        messagebox.showwarning(
            "Warning", "Please select the flash drive and the destination folder."
        )


if __name__ == "__main__":
    drives = get_usb_drives()


window = tk.Tk()
window.geometry("300x370")
window.configure(bg="#808080")
window.title("FlashBackup")

image_1 = tk.PhotoImage(file=load_asset("1_2.png"))
image_2 = tk.PhotoImage(file=load_asset("1_3.png"))


canvas = tk.Canvas(
    window,
    bg="#808080",
    width=300,
    height=370,
    bd=0,
    highlightthickness=0,
    relief="ridge",
)
canvas.place(x=0, y=0)
canvas.create_image(153, 166, image=image_1)
canvas.create_image(150, 347, image=image_2)

combobox = ttk.Combobox(
    values=drives,
    width=17,
)
combobox.place(x=157, y=11, width=126, height=21)

button_1_image = tk.PhotoImage(file=load_asset("2.png"))
button_1 = tk.Button(
    image=button_1_image,
    relief="flat",
    borderwidth=0,
    highlightthickness=0,
    command=select_outpath,
)
button_1.place(x=245, y=242, width=21, height=16)

button_2_image = tk.PhotoImage(file=load_asset("3.png"))
button_2 = tk.Button(
    image=button_2_image,
    relief="flat",
    borderwidth=0,
    highlightthickness=0,
    command=start_copy,
)
button_2.place(x=75, y=289, width=146, height=33)

button_3_image = tk.PhotoImage(file=load_asset("GitHub.png"))
button_3 = tk.Button(
    image=button_3_image,
    relief="flat",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: webbrowser.open(
        "https://github.com/tHere1sh0p3/Kursovaya2",
    ),
)
button_3.place(x=26, y=13, width=42, height=43)

textbox_1 = TkForge_Entry(
    bd=0,
    bg="#f5f5f5",
    fg="#000000",
    placeholder="Backup path",
    insertbackground="#000000",
    highlightthickness=0,
    font=("tilda sans medium", 13),
)
textbox_1.place(x=29, y=238, width=209, height=23)


progress_bar = ttk.Progressbar(
    window,
    orient="horizontal",
    length=200,
    mode="determinate",
    style="Horizontal.TProgressbar",
)
progress_bar.place(x=23, y=337, width=254, height=20)

window.resizable(False, False)
window.mainloop()
